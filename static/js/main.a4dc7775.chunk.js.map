{"version":3,"sources":["Components/Icon.js","App.js","reportWebVitals.js","index.js"],"names":["Icon","name","className","itemArray","Array","fill","App","useState","isCross","setisCross","winMessage","setwinMessage","changeItem","itemNumber","toast","type","Container","position","Row","Col","md","Button","color","onClick","map","item","index","Card","CardBody","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a4dc7775.chunk.js","sourcesContent":["/** @format */\n\nimport React from \"react\";\nimport { FaTimes, FaPen, FaRegCircle } from \"react-icons/fa\";\nexport const Icon = ({name}) => {\n    switch (name)\n    {\n        case 'cross': \n            return <FaTimes className=\"icon\" />\n        case 'circle':\n            return <FaRegCircle className=\"icon\" />\n        default:\n            return <FaPen className=\"icon\"/>\n    }\n};\nexport default Icon;\n","/** @format */\nimport React, { useState } from \"react\";\n\nimport Icon from \"./Components/Icon\";\n\nimport { ToastContainer, toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\n\nimport { Button, CardBody, Container, Row, Col, Card } from \"reactstrap\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./App.css\";\n\nconst itemArray = new Array(9).fill(\"empty\");\n\nconst App = () => {\n  const [isCross, setisCross] = useState(false);\n  const [winMessage, setwinMessage] = useState(\"\");\n\n  const reloadGame = () => {\n    setisCross(\"false\");\n    setwinMessage(\"\");\n    itemArray.fill(\"empty\", 0, 9);\n  };\n  const checkWinner = () => {\n    //  checking  winner of the game\n    if (\n      itemArray[0] === itemArray[1] &&\n      itemArray[0] === itemArray[2] &&\n      itemArray[0] !== \"empty\"\n    ) {\n      setwinMessage(`${itemArray[0]} won`);\n    } else if (\n      itemArray[3] !== \"empty\" &&\n      itemArray[3] === itemArray[4] &&\n      itemArray[4] === itemArray[5]\n    ) {\n      setwinMessage(`${itemArray[3]} won`);\n    } else if (\n      itemArray[6] !== \"empty\" &&\n      itemArray[6] === itemArray[7] &&\n      itemArray[7] === itemArray[8]\n    ) {\n      setwinMessage(`${itemArray[6]} won`);\n    } else if (\n      itemArray[0] !== \"empty\" &&\n      itemArray[0] === itemArray[3] &&\n      itemArray[3] === itemArray[6]\n    ) {\n      setwinMessage(`${itemArray[0]} won`);\n    } else if (\n      itemArray[1] !== \"empty\" &&\n      itemArray[1] === itemArray[4] &&\n      itemArray[4] === itemArray[7]\n    ) {\n      setwinMessage(`${itemArray[1]} won`);\n    } else if (\n      itemArray[2] !== \"empty\" &&\n      itemArray[2] === itemArray[5] &&\n      itemArray[5] === itemArray[8]\n    ) {\n      setwinMessage(`${itemArray[2]} won`);\n    } else if (\n      itemArray[0] !== \"empty\" &&\n      itemArray[0] === itemArray[4] &&\n      itemArray[4] === itemArray[8]\n    ) {\n      setwinMessage(`${itemArray[0]} won`);\n    } else if (\n      itemArray[2] !== \"empty\" &&\n      itemArray[2] === itemArray[4] &&\n      itemArray[4] === itemArray[6]\n    ) {\n      setwinMessage(`${itemArray[2]} won`);\n    }\n  };\n  const changeItem = (itemNumber) => {\n    if (winMessage) {\n      // we use toastify popup like this\n      return toast(winMessage, { type: \"success\" });\n    }\n    if (itemArray[itemNumber] === \"empty\") {\n      itemArray[itemNumber] = isCross ? \"circle\" : \"cross\";\n      setisCross(!isCross);\n    } else {\n      return toast(\"already Filled\", { type: \"error\" });\n    }\n    checkWinner();\n  };\n\n  return (\n    <Container className=\"pd-5\">\n      <ToastContainer position=\"bottom-center\" />\n      <Row>\n        <Col md={6} className=\"offset-md-3\">\n          {winMessage ? (\n            <div className=\"mb-2 mt-2\">\n              <h1\n                className=\"text-center text-uppercase won\">\n                {winMessage}\n              </h1>\n              <Button color=\"success block \" onClick={reloadGame}>\n                Reload\n              </Button>\n            </div>\n          ) : (\n            <h1 className=\"text-primary text-center text-uppercase\">\n              {isCross ? \"circle\" : \"cross\"} turn\n            </h1>\n          )}\n\n          <div className=\"grid\">\n            {itemArray.map((item, index) => (\n              <Card onClick={() => changeItem(index)} color=\"warning\">\n                <CardBody className=\"box\">\n                  <Icon name={item} />\n                </CardBody>\n              </Card>\n            ))}\n          </div>\n        </Col>\n      </Row>\n    </Container>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}